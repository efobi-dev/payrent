generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Invoice {
  id             String   @id @default(uuid())
  userId         String
  subscriptionId String
  amount         Float
  date           DateTime
  status         String
  User           User     @relation(fields: [userId], references: [clerkUserId])
  Sale           Sale?    @relation(fields: [saleId], references: [id])
  saleId         String?
  Rental         Rental?  @relation(fields: [rentalId], references: [id])
  rentalId       String?
}

model Loan {
  id           String   @id @default(uuid())
  propertyId   String
  userId       String
  loanAmount   Float
  interestRate Float
  startDate    DateTime
  endDate      DateTime
  Property     Property @relation(fields: [propertyId], references: [id])
  User         User     @relation(fields: [userId], references: [clerkUserId])
}

model Property {
  id              String          @id @default(uuid())
  name            String
  excerpt         String
  description     String
  images          PropertyImage[]
  bedrooms        Int
  bathrooms       Int
  location        String
  state           String
  lotSize         Float
  squareFeet      Float
  paymentDuration Int?
  isForSale       Boolean         @default(false)
  isForRent       Boolean         @default(false)
  salePrice       Float?
  rentPrice       Float?
  propertyType    String
  Loan            Loan[]
  Rental          Rental[]
  Sale            Sale[]
  Like            Like[]
}

model PropertyImage {
  id         String   @id @default(uuid())
  propertyId String
  url        String
  Property   Property @relation(fields: [propertyId], references: [id])
}

model Rental {
  id         String    @id @default(uuid())
  propertyId String
  userId     String
  plan       String
  startDate  DateTime
  endDate    DateTime
  rentAmount Float
  Invoice    Invoice[]
  Property   Property  @relation(fields: [propertyId], references: [id])
  User       User      @relation(fields: [userId], references: [clerkUserId])
}

model Sale {
  id                      String    @id @default(uuid())
  propertyId              String
  buyerId                 String
  plan                    String
  salePrice               Float
  saleDate                DateTime
  Invoice                 Invoice[]
  User_Sale_buyerIdToUser User      @relation("Sale_buyerIdToUser", fields: [buyerId], references: [clerkUserId])
  Property                Property  @relation(fields: [propertyId], references: [id])
}

model User {
  id                      Int       @id @default(autoincrement())
  clerkUserId             String    @unique
  createdAt               DateTime
  email                   String    @unique
  Invoice                 Invoice[]
  Loan                    Loan[]
  Rental                  Rental[]
  Sale_Sale_buyerIdToUser Sale[]    @relation("Sale_buyerIdToUser")
  Like                    Like[]
}

model Like {
  id         String   @id @default(uuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())
  User       User     @relation(fields: [userId], references: [clerkUserId])
  Property   Property @relation(fields: [propertyId], references: [id])
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Invoice {
  id             String       @id @default(uuid())
  userId         String
  subscriptionId String
  amount         Float
  date           DateTime
  status         String
  Subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  User           User         @relation(fields: [userId], references: [clerkUserId])
}

model Loan {
  id           String   @id @default(uuid())
  propertyId   String
  userId       String
  loanAmount   Float
  interestRate Float
  startDate    DateTime
  endDate      DateTime
  Property     Property @relation(fields: [propertyId], references: [id])
  User         User     @relation(fields: [userId], references: [clerkUserId])
}

model Property {
  id              String          @id @default(uuid())
  name            String
  excerpt         String
  description     String
  images          PropertyImage[]
  bedrooms        Int
  bathrooms       Int
  location        String
  state           String
  lotSize         Float
  squareFeet      Float
  paymentDuration Subscription[]
  isForSale       Boolean         @default(false)
  isForRent       Boolean         @default(false)
  salePrice       Float?
  rentPrice       Float?
  propertyType    String
  Loan            Loan[]
  Rental          Rental[]
  Sale            Sale[]
  Like            Like[]
}

model PropertyImage {
  id         String   @id @default(uuid())
  propertyId String
  url        String
  Property   Property @relation(fields: [propertyId], references: [id])
}

model Rental {
  id         String   @id @default(uuid())
  propertyId String
  userId     String
  startDate  DateTime
  endDate    DateTime
  rentAmount Float
  Property   Property @relation(fields: [propertyId], references: [id])
  User       User     @relation(fields: [userId], references: [clerkUserId])
}

model Sale {
  id                       String   @id @default(uuid())
  propertyId               String
  buyerId                  String
  sellerId                 String
  salePrice                Float
  saleDate                 DateTime
  User_Sale_buyerIdToUser  User     @relation("Sale_buyerIdToUser", fields: [buyerId], references: [clerkUserId])
  Property                 Property @relation(fields: [propertyId], references: [id])
  User_Sale_sellerIdToUser User     @relation("Sale_sellerIdToUser", fields: [sellerId], references: [clerkUserId])
}

model Subscription {
  id                 String    @id @default(uuid())
  userId             String
  propertyId         String
  plan               String
  startDate          DateTime
  endDate            DateTime
  cashbackPercentage Float
  Invoice            Invoice[]
  User               User      @relation(fields: [userId], references: [clerkUserId])
  Property           Property  @relation(fields: [propertyId], references: [id])
}

model User {
  id                       Int            @id @default(autoincrement())
  clerkUserId              String         @unique
  createdAt                DateTime
  email                    String         @unique
  Invoice                  Invoice[]
  Loan                     Loan[]
  Rental                   Rental[]
  Sale_Sale_buyerIdToUser  Sale[]         @relation("Sale_buyerIdToUser")
  Sale_Sale_sellerIdToUser Sale[]         @relation("Sale_sellerIdToUser")
  Subscription             Subscription[]
  Like                     Like[]
}

model Like {
  id         String   @id @default(uuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())
  User       User     @relation(fields: [userId], references: [clerkUserId])
  Property   Property @relation(fields: [propertyId], references: [id])
}
